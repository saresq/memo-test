extend type Query {
  "Get all Memotast"
  sessions: [Session] @all

  "Get Session By ID"
  session(id: ID @eq): Session @find

  "Get the session with status STARTED"
  getStartedSessions: [Session]

  "Get the highscores for each created memotest session."
  getHighScores: [Session]
}

extend type Mutation {
  createSession(memotestId: Int!, numberOfPairs: Int!): Session!
  updateSession(id: ID!, retries: Int!): Session!
  endSession(id: ID!): Session!
  saveGameState(id: ID!, gameState: [String]!): Session!
}

type Session {
  id: ID!
  memotestId: Int!
  retries: Int
  numberOfPairs: Int
  state: SessionState!
  score: Int
  created_at: DateTime!
  updated_at: DateTime!
  gameState: [String]!
}

enum SessionState {
  STARTED
  COMPLETED
  CANCELED
}
